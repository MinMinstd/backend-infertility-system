// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infertility_system.Data;

#nullable disable

namespace infertility_system.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250612165641_UpdateDb")]
    partial class UpdateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("infertility_system.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("infertility_system.Models.BlogPost", b =>
                {
                    b.Property<int>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPostId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Story")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogPostId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("infertility_system.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int?>("ConsulationRegistrationId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DoctorScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("ConsulationRegistrationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("infertility_system.Models.ConsulationRegistration", b =>
                {
                    b.Property<int>("ConsulationRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsulationRegistrationId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsulationRegistrationId");

                    b.ToTable("ConsulationRegistrations");
                });

            modelBuilder.Entity("infertility_system.Models.ConsulationResult", b =>
                {
                    b.Property<int>("ConsulationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsulationResultId"));

                    b.Property<int>("ConsulationRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsulationResultId");

                    b.HasIndex("ConsulationRegistrationId")
                        .IsUnique();

                    b.ToTable("ConsulationResults");
                });

            modelBuilder.Entity("infertility_system.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("infertility_system.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("infertility_system.Models.DoctorDegree", b =>
                {
                    b.Property<int>("DoctorDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorDegreeId"));

                    b.Property<string>("DegreeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("int");

                    b.HasKey("DoctorDegreeId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDegrees");
                });

            modelBuilder.Entity("infertility_system.Models.DoctorSchedule", b =>
                {
                    b.Property<int>("DoctorScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorScheduleId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("DoctorScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ManagerId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("infertility_system.Models.Embryo", b =>
                {
                    b.Property<int>("EmbryoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmbryoId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmbryoId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Embryos");
                });

            modelBuilder.Entity("infertility_system.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceDBId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ServiceDBId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("infertility_system.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("infertility_system.Models.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("infertility_system.Models.MedicalRecordDetail", b =>
                {
                    b.Property<int>("MedicalRecordDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordDetailId"));

                    b.Property<int?>("ConsulationResultId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreatmentResultId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentRoadmapId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordDetailId");

                    b.HasIndex("ConsulationResultId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("TreatmentResultId");

                    b.HasIndex("TreatmentRoadmapId");

                    b.ToTable("MedicalRecordDetails");
                });

            modelBuilder.Entity("infertility_system.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Husband")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Wife")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("infertility_system.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("ConsulationRegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ConsulationRegistrationId")
                        .IsUnique()
                        .HasFilter("[ConsulationRegistrationId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("infertility_system.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceByTreatement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentRoadmapId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TreatmentRoadmapId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("infertility_system.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentResultId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("TreatmentResultId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("infertility_system.Models.PrescriptionDetail", b =>
                {
                    b.Property<int>("PrescriptionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionDetailId"));

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionDetailId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetails");
                });

            modelBuilder.Entity("infertility_system.Models.ServiceDB", b =>
                {
                    b.Property<int>("ServiceDBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceDBId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceDBId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("infertility_system.Models.TreatmentResult", b =>
                {
                    b.Property<int>("TreatmentResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentResultId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDay")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentRoadmapId")
                        .HasColumnType("int");

                    b.HasKey("TreatmentResultId");

                    b.HasIndex("TreatmentRoadmapId");

                    b.ToTable("TreatmentResults");
                });

            modelBuilder.Entity("infertility_system.Models.TreatmentRoadmap", b =>
                {
                    b.Property<int>("TreatmentRoadmapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentRoadmapId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDay")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentRoadmapId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TreatmentRoadmaps");
                });

            modelBuilder.Entity("infertility_system.Models.TypeTest", b =>
                {
                    b.Property<int>("TypeTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeTestId"));

                    b.Property<int>("ConsulationResultId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentResultId")
                        .HasColumnType("int");

                    b.HasKey("TypeTestId");

                    b.HasIndex("ConsulationResultId");

                    b.HasIndex("TreatmentResultId");

                    b.ToTable("TypeTests");
                });

            modelBuilder.Entity("infertility_system.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("infertility_system.Models.BlogPost", b =>
                {
                    b.HasOne("infertility_system.Models.Customer", "Customer")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.Manager", "Manager")
                        .WithMany("BlogPosts")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("infertility_system.Models.Booking", b =>
                {
                    b.HasOne("infertility_system.Models.ConsulationRegistration", "ConsulationRegistration")
                        .WithMany("Bookings")
                        .HasForeignKey("ConsulationRegistrationId");

                    b.HasOne("infertility_system.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId");

                    b.HasOne("infertility_system.Models.DoctorSchedule", "DoctorSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorScheduleId");

                    b.Navigation("ConsulationRegistration");

                    b.Navigation("Customer");

                    b.Navigation("DoctorSchedule");
                });

            modelBuilder.Entity("infertility_system.Models.ConsulationResult", b =>
                {
                    b.HasOne("infertility_system.Models.ConsulationRegistration", "ConsulationRegistration")
                        .WithOne("ConsulationResult")
                        .HasForeignKey("infertility_system.Models.ConsulationResult", "ConsulationRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsulationRegistration");
                });

            modelBuilder.Entity("infertility_system.Models.DoctorDegree", b =>
                {
                    b.HasOne("infertility_system.Models.Doctor", "Doctor")
                        .WithMany("DoctorDegrees")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("infertility_system.Models.DoctorSchedule", b =>
                {
                    b.HasOne("infertility_system.Models.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.Manager", "Manager")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("infertility_system.Models.Embryo", b =>
                {
                    b.HasOne("infertility_system.Models.Customer", "Customer")
                        .WithMany("Embryos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("infertility_system.Models.Feedback", b =>
                {
                    b.HasOne("infertility_system.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.Manager", "Manager")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.ServiceDB", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceDBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("infertility_system.Models.MedicalRecord", b =>
                {
                    b.HasOne("infertility_system.Models.Customer", "Customer")
                        .WithMany("MedicalRecord")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("infertility_system.Models.MedicalRecordDetail", b =>
                {
                    b.HasOne("infertility_system.Models.ConsulationResult", "ConsulationResult")
                        .WithMany("MedicalRecordDetails")
                        .HasForeignKey("ConsulationResultId");

                    b.HasOne("infertility_system.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalRecordDetails")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.TreatmentResult", "TreatmentResult")
                        .WithMany("MedicalRecordDetails")
                        .HasForeignKey("TreatmentResultId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("infertility_system.Models.TreatmentRoadmap", "TreatmentRoadmap")
                        .WithMany("MedicalRecordDetails")
                        .HasForeignKey("TreatmentRoadmapId");

                    b.Navigation("ConsulationResult");

                    b.Navigation("MedicalRecord");

                    b.Navigation("TreatmentResult");

                    b.Navigation("TreatmentRoadmap");
                });

            modelBuilder.Entity("infertility_system.Models.Order", b =>
                {
                    b.HasOne("infertility_system.Models.Booking", "Booking")
                        .WithOne("Order")
                        .HasForeignKey("infertility_system.Models.Order", "BookingId");

                    b.HasOne("infertility_system.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("infertility_system.Models.Manager", "Manager")
                        .WithMany("Orders")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("infertility_system.Models.OrderDetail", b =>
                {
                    b.HasOne("infertility_system.Models.ConsulationRegistration", "ConsulationRegistration")
                        .WithOne("OrderDetail")
                        .HasForeignKey("infertility_system.Models.OrderDetail", "ConsulationRegistrationId");

                    b.HasOne("infertility_system.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("infertility_system.Models.ServiceDB", "Service")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId");

                    b.Navigation("ConsulationRegistration");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("infertility_system.Models.Payment", b =>
                {
                    b.HasOne("infertility_system.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.TreatmentRoadmap", "TreatmentRoadmap")
                        .WithOne("Payment")
                        .HasForeignKey("infertility_system.Models.Payment", "TreatmentRoadmapId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TreatmentRoadmap");
                });

            modelBuilder.Entity("infertility_system.Models.Prescription", b =>
                {
                    b.HasOne("infertility_system.Models.TreatmentResult", "TreatmentResult")
                        .WithMany("Prescriptions")
                        .HasForeignKey("TreatmentResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentResult");
                });

            modelBuilder.Entity("infertility_system.Models.PrescriptionDetail", b =>
                {
                    b.HasOne("infertility_system.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("infertility_system.Models.ServiceDB", b =>
                {
                    b.HasOne("infertility_system.Models.Manager", "Manager")
                        .WithMany("Services")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("infertility_system.Models.TreatmentResult", b =>
                {
                    b.HasOne("infertility_system.Models.TreatmentRoadmap", "TreatmentRoadmap")
                        .WithMany("TreatmentResults")
                        .HasForeignKey("TreatmentRoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentRoadmap");
                });

            modelBuilder.Entity("infertility_system.Models.TreatmentRoadmap", b =>
                {
                    b.HasOne("infertility_system.Models.ServiceDB", "Service")
                        .WithMany("TreatmentRoadmaps")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("infertility_system.Models.TypeTest", b =>
                {
                    b.HasOne("infertility_system.Models.ConsulationResult", "ConsulationResult")
                        .WithMany("TypeTests")
                        .HasForeignKey("ConsulationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infertility_system.Models.TreatmentResult", "TreatmentResult")
                        .WithMany("TypeTest")
                        .HasForeignKey("TreatmentResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsulationResult");

                    b.Navigation("TreatmentResult");
                });

            modelBuilder.Entity("infertility_system.Models.Booking", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("infertility_system.Models.ConsulationRegistration", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ConsulationResult");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("infertility_system.Models.ConsulationResult", b =>
                {
                    b.Navigation("MedicalRecordDetails");

                    b.Navigation("TypeTests");
                });

            modelBuilder.Entity("infertility_system.Models.Customer", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("Bookings");

                    b.Navigation("Embryos");

                    b.Navigation("Feedbacks");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("infertility_system.Models.Doctor", b =>
                {
                    b.Navigation("DoctorDegrees");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("infertility_system.Models.DoctorSchedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("infertility_system.Models.Manager", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("infertility_system.Models.MedicalRecord", b =>
                {
                    b.Navigation("MedicalRecordDetails");
                });

            modelBuilder.Entity("infertility_system.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("infertility_system.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("infertility_system.Models.ServiceDB", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("TreatmentRoadmaps");
                });

            modelBuilder.Entity("infertility_system.Models.TreatmentResult", b =>
                {
                    b.Navigation("MedicalRecordDetails");

                    b.Navigation("Prescriptions");

                    b.Navigation("TypeTest");
                });

            modelBuilder.Entity("infertility_system.Models.TreatmentRoadmap", b =>
                {
                    b.Navigation("MedicalRecordDetails");

                    b.Navigation("Payment");

                    b.Navigation("TreatmentResults");
                });
#pragma warning restore 612, 618
        }
    }
}
